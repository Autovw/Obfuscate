buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
// apply plugin: 'eclipse'

version = '0.4.0-1.14.4'
group = 'com.mrcrayfish' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'obfuscate'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20190719-1.14.3'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                cfm {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                cfm {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')
            mods {
                cfm {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.14.4-28.2.0'

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "Obfuscate",
            "Specification-Vendor": "MrCrayfish",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"MrCrayfish",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Signing-Fingerprint": project.hasProperty('fingerprint') ? project.property('fingerprint') : 'unsigned'
        ])
    }
}

//Loads the keystore from remote location
Properties keyStoreProperties = new Properties()
File file = new File("C:\\dev\\keystore.properties")
if(file.exists()) {
    InputStream ins = new FileInputStream(file)
    keyStoreProperties.load(ins)
    ins.close()
}

import net.minecraftforge.gradle.common.task.SignJar

task signJar(type: SignJar, dependsOn: jar) {
    onlyIf {
        keyStoreProperties.containsKey('keyStore')
    }
    alias = keyStoreProperties.getProperty('alias')
    storePass = keyStoreProperties.getProperty('storePass')
    keyPass = keyStoreProperties.getProperty('keyPass')
    keyStore = keyStoreProperties.getProperty('keyStore')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}
build.dependsOn signJar